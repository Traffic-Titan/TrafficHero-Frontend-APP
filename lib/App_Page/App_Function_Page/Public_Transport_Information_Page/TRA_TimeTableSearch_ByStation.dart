import 'package:dropdown_search/dropdown_search.dart';
import 'package:traffic_hero/App_Page/App_Function_Page/Public_Transport_Information_Page/TRA_TimeTableSearch_ByStation_Result.dart';
import 'package:traffic_hero/imports.dart';

// 全台火車站名
const List<String> stopName =  <String>["八堵",
  "板橋",
  "樹林",
  "埔心",
  "北新竹",
  "竹東",
  "九讚頭",
  "合興",
  "大山",
  "通霄",
  "日南",
  "大甲",
  "臺中港",
  "清水",
  "苗栗",
  "豐原",
  "栗林",
  "頭家厝",
  "松竹",
  "太原",
  "精武",
  "臺中",
  "五權",
  "大慶",
  "成功",
  "大村",
  "社頭",
  "林內",
  "石榴",
  "民雄",
  "嘉北",
  "柳營",
  "隆田",
  "善化",
  "新市",
  "大橋",
  "保安",
  "仁德",
  "中洲",
  "路竹",
  "岡山",
  "橋頭",
  "新左營",
  "左營",
  "美術館",
  "民族",
  "後庄",
  "潮州",
  "林邊",
  "枋寮",
  "內獅",
  "金崙",
  "知本",
  "康樂",
  "臺東",
  "山里",
  "關山",
  "海端",
  "池上",
  "三民",
  "大富",
  "光復",
  "北埔",
  "南澳",
  "新馬",
  "中里",
  "宜蘭",
  "牡丹",
  "十分",
  "四腳亭",
  "三坑",
  "七堵",
  "五堵",
  "南港",
  "南樹林",
  "中壢",
  "富岡",
  "新富",
  "北湖",
  "千甲",
  "新莊",
  "上員",
  "橫山",
  "新竹",
  "龍港",
  "沙鹿",
  "追分",
  "豐富",
  "南勢",
  "銅鑼",
  "三義",
  "花壇",
  "員林",
  "源泉",
  "龍泉",
  "車埕",
  "斗南",
  "石龜",
  "嘉義",
  "拔林",
  "南科",
  "長榮大學",
  "高雄",
  "九曲堂",
  "屏東",
  "麟洛",
  "南州",
  "鹿野",
  "瑞源",
  "東竹",
  "玉里",
  "富源",
  "萬榮",
  "南平",
  "豐田",
  "吉安",
  "景美",
  "新城",
  "崇德",
  "武塔",
  "蘇澳新",
  "羅東",
  "二結",
  "外澳",
  "石城",
  "福隆",
  "雙溪",
  "三貂嶺",
  "大華",
  "望古",
  "菁桐",
  "暖暖",
  "臺北-環島",
  "山佳",
  "內壢",
  "新豐",
  "竹北",
  "六家",
  "榮華",
  "富貴",
  "香山",
  "竹南",
  "白沙屯",
  "新埔",
  "苑裡",
  "大肚",
  "造橋",
  "潭子",
  "濁水",
  "集集",
  "斗六",
  "大林",
  "水上",
  "南靖",
  "林鳳營",
  "沙崙",
  "楠梓",
  "鼓山",
  "科工館",
  "六塊厝",
  "竹田",
  "崁頂",
  "鎮安",
  "佳冬",
  "枋山",
  "枋野",
  "大武",
  "瀧溪",
  "太麻里",
  "瑞和",
  "富里",
  "東里",
  "瑞穗",
  "林榮新光",
  "平和",
  "志學",
  "花蓮",
  "和仁",
  "東澳",
  "永樂",
  "蘇澳",
  "冬山",
  "礁溪",
  "龜山",
  "大溪",
  "貢寮",
  "嶺腳",
  "猴硐",
  "八斗子",
  "基隆",
  "百福",
  "汐止",
  "汐科",
  "松山",
  "臺北",
  "萬華",
  "浮洲",
  "鶯歌",
  "桃園",
  "楊梅",
  "湖口",
  "竹中",
  "內灣",
  "三姓橋",
  "崎頂",
  "談文",
  "後龍",
  "龍井",
  "泰安",
  "后里",
  "烏日",
  "新烏日",
  "彰化",
  "永靖",
  "田中",
  "二水",
  "水里",
  "後壁",
  "新營",
  "永康",
  "臺南",
  "大湖",
  "內惟",
  "三塊厝",
  "正義",
  "鳳山",
  "歸來",
  "西勢",
  "東海",
  "加祿",
  "南方小站",
  "潮州基地",
  "鳳林",
  "壽豐",
  "和平",
  "漢本",
  "四城",
  "頂埔",
  "頭城",
  "大里",
  "平溪",
  "瑞芳",
  "海科館"];
// 全台火車站點ID
const List<String> stationID = <String>["0920",
  "1020",
  "1040",
  "1110",
  "1190",
  "1203",
  "1205",
  "1206",
  "2120",
  "2170",
  "2190",
  "2200",
  "2210",
  "2220",
  "3160",
  "3230",
  "3240",
  "3260",
  "3270",
  "3280",
  "3290",
  "3300",
  "3310",
  "3320",
  "3350",
  "3380",
  "3410",
  "3450",
  "3460",
  "4060",
  "4070",
  "4130",
  "4150",
  "4170",
  "4190",
  "4210",
  "4250",
  "4260",
  "4270",
  "4300",
  "4310",
  "4320",
  "4340",
  "4350",
  "4370",
  "4410",
  "4450",
  "5050",
  "5090",
  "5120",
  "5140",
  "5210",
  "5230",
  "5240",
  "6000",
  "6010",
  "6050",
  "6060",
  "6070",
  "6120",
  "6150",
  "6160",
  "7010",
  "7090",
  "7140",
  "7170",
  "7190",
  "7320",
  "7332",
  "7380",
  "0910",
  "0930",
  "0950",
  "0980",
  "1050",
  "1100",
  "1130",
  "1140",
  "1150",
  "1191",
  "1192",
  "1201",
  "1204",
  "1210",
  "2140",
  "2230",
  "2260",
  "3150",
  "3170",
  "3180",
  "3190",
  "3370",
  "3390",
  "3431",
  "3433",
  "3436",
  "3480",
  "3490",
  "4080",
  "4160",
  "4180",
  "4271",
  "4400",
  "4460",
  "5000",
  "5020",
  "5070",
  "6020",
  "6030",
  "6090",
  "6110",
  "6140",
  "6170",
  "6190",
  "6210",
  "6250",
  "7020",
  "7030",
  "7040",
  "7080",
  "7130",
  "7160",
  "7180",
  "7240",
  "7280",
  "7290",
  "7310",
  "7330",
  "7331",
  "7333",
  "7336",
  "7390",
  "1001",
  "1060",
  "1090",
  "1170",
  "1180",
  "1194",
  "1202",
  "1207",
  "1230",
  "1250",
  "2150",
  "2160",
  "2180",
  "2250",
  "3140",
  "3250",
  "3432",
  "3434",
  "3470",
  "4050",
  "4090",
  "4100",
  "4140",
  "4272",
  "4330",
  "4380",
  "4420",
  "4470",
  "5040",
  "5060",
  "5080",
  "5100",
  "5160",
  "5170",
  "5190",
  "5200",
  "5220",
  "6040",
  "6080",
  "6100",
  "6130",
  "6200",
  "6230",
  "6240",
  "7000",
  "7050",
  "7100",
  "7110",
  "7120",
  "7150",
  "7210",
  "7250",
  "7260",
  "7300",
  "7334",
  "7350",
  "7362",
  "0900",
  "0940",
  "0960",
  "0970",
  "0990",
  "1000",
  "1010",
  "1030",
  "1070",
  "1080",
  "1120",
  "1160",
  "1193",
  "1208",
  "1220",
  "1240",
  "2110",
  "2130",
  "2240",
  "3210",
  "3220",
  "3330",
  "3340",
  "3360",
  "3400",
  "3420",
  "3430",
  "3435",
  "4110",
  "4120",
  "4200",
  "4220",
  "4290",
  "4360",
  "4390",
  "4430",
  "4440",
  "5010",
  "5030",
  "5110",
  "5130",
  "5998",
  "5999",
  "6180",
  "6220",
  "7060",
  "7070",
  "7200",
  "7220",
  "7230",
  "7270",
  "7335",
  "7360",
  "7361"];
String dropDownValue_Start = stopName.first;


class TRA_TimeTableSearch_ByStation extends StatefulWidget {
  const TRA_TimeTableSearch_ByStation({Key? key}) : super(key: key);

  @override
  State<TRA_TimeTableSearch_ByStation> createState() => _TRA_TimeTableSearch_ByStationState();
}
var state;
var screenWidth;
class _TRA_TimeTableSearch_ByStationState extends State<TRA_TimeTableSearch_ByStation> {
  @override
  Widget build(BuildContext context) {
    state = Provider.of<stateManager>(context, listen: false);
    screenWidth = MediaQuery. of(context). size. width ;
    return Scaffold(
      backgroundColor: Color.fromRGBO(221, 235, 247, 1),
      body: Column(
        children: [
          SizedBox(height: 10,),
          Align(
            alignment: Alignment.centerLeft,
            child:Text('3.車站查詢',style: TextStyle(color: Color.fromRGBO(29, 73, 153, 1),fontSize: 20),textAlign:TextAlign.left,),
          ),
        //起訖站查詢按鈕
          Container(
              alignment: Alignment.center,
              child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    //選擇起始地
                    DecoratedBox(
                        decoration: BoxDecoration(
                            border: Border.all(color: Color.fromRGBO(24, 60, 126, 1),width: 2),
                            borderRadius: BorderRadius.circular(15),
                            color: Color.fromRGBO(221, 235, 247, 1)
                        ),
                        child: Container(
                            height: 60,
                            width: 150,
                            alignment: Alignment.center,

                            child: DropdownSearch<String>(
                              items: stopName,
                              popupProps: PopupProps.menu(
                                showSearchBox: true, // add this line
                                showSelectedItems: true,
                              ),
                              dropdownDecoratorProps: DropDownDecoratorProps(
                                  textAlign: TextAlign.center,
                                  baseStyle:TextStyle(fontSize: 20),
                                  dropdownSearchDecoration: InputDecoration(
                                  )),
                              onChanged: (String? value) => setState(() {
                                dropDownValue_Start = value!;
                              }),
                              selectedItem: stopName.first,
                            )
                        )
                    ),
                    // DecoratedBox(
                    //     decoration: BoxDecoration(
                    //         border: Border.all(color: Color.fromRGBO(24, 60, 126, 1),width: 2),
                    //         borderRadius: BorderRadius.circular(15),
                    //         color: Color.fromRGBO(221, 235, 247, 1)
                    //     ),
                    //     child: Container(
                    //       height: 60,
                    //       width: 150,
                    //       alignment: Alignment.center,
                    //       child: DropdownButton(
                    //           value: dropDownValue_Start,
                    //           items: stopName.map<DropdownMenuItem<String>>((String value) {
                    //             return DropdownMenuItem<String>(
                    //               value: value,
                    //               child: Text(value),
                    //             );
                    //           }).toList(),
                    //           onChanged:(String? value){
                    //             setState(() {
                    //               dropDownValue_Start = value!;
                    //             });
                    //           }
                    //       ),
                    //     )
                    // ),
                  ]
              )
          ),
          SizedBox(height: 10,),
          TextButton(
              onPressed: () async {
                var outBoundList = [];
                var inBoundList = [];
                var url = dotenv.env['TRA_DailyTimeTable_ByStation'].toString() +
                    '?StationID=${stationID[stopName.indexOf(dropDownValue_Start)]}';
                var jwt = ',' + state.accountState.toString();
                var response = await api().apiGet(url, jwt);
                if (response.statusCode == 200) {
                  // inBoundList.clear();
                  // outBoundList.clear();
                  var data = jsonDecode(utf8.decode(response.bodyBytes));
                  for(int i =0;i<data.length;i++){
                    if(data[i]['Direction'] == 0){
                      setState(() {
                        outBoundList.add(data[i]);
                      });
                    }
                    else{
                      setState(() {
                        inBoundList.add(data[i]);
                      });
                    }
                  }
                  setState(() {
                    state.updateTRA_TimeTableSearch_Station(dropDownValue_Start);
                    state.updateTRA_TimeTableSearch_Station_Result_OutBound(outBoundList);
                    state.updateTRA_TimeTableSearch_Station_Result_InBound(inBoundList);
                  });
                  Future.delayed(Duration(seconds: 1),(){
                    Navigator.push(context, MaterialPageRoute(builder: (context) => TRA_TimeTableSearch_ByStation_Result()));
                  });

                }
              },
              child: Text("搜尋")
          )
        ],
      ),
    );
  }
}
